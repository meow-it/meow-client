async function getLocalForage(t){try{let e=await localforage.getItem(t);return e}catch(t){return console.log("Something Happened: 😓",t),null}}async function setLocalForage(t,e){try{await localforage.setItem(t,e)}catch(t){console.log("Something Happened: 😓",t)}}async function register(){try{let t=await fetch(serverURLAPIEndpoint+"register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({})}),e=await t.json();return setLocalForage("user",e),e}catch(t){return console.log("Something Happened: 😓",t),null}}async function checkLocationPermission(){let t=!1;if(null==window.chrome)try{return t=await getCurrentPosition(),0!=t}catch(t){return console.log(t),!1}if(!navigator.permissions)return!1;let e=await navigator.permissions.query({name:"geolocation"});return"granted"==e.state}function setDisplayNone(t){for(let e in t)t[e].style.display="none"}async function getPosts({latitude:t,longitude:e}){let n=null;try{n=await fetch(serverURLAPIEndpoint+"meow/all",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({latitude:t,longitude:e})})}catch(t){return console.log("Something Happened: 😓",t),null}if(null==n)return null;let a=await n.json();return a}async function getComments(t){let e=null;try{e=await fetch(serverURLAPIEndpoint+`comment/${t}`)}catch(t){return console.log("Something Happened: 😓",t),null}if(null==e)return null;let n=await e.json();return n}async function handleReviewComment(t){let e=t.target.dataset.id;t.target.src="./assets/image/reviewed.webp",t.target.classList.remove("reportComment"),t.target.classList.add("reviewed"),await fetch(serverURLAPIEndpoint+"comment/review",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:user._id,commentId:e})})}function commentsPlaceholderDiv(t=!1){let e="loadingComments",n=t?"./assets/image/nodata.gif":"./assets/image/loading.gif",a=t?"No Comments Yet. Try sending a new one 🤩":"Loading Comments..",i=t?"150":"80";return`<div class="${e}">\n\t\t\t\t<img src="${n}" alt="Loading Comments" height="${i}" width="${i}" >\t\n\t\t\t\t<span>${a}</span>\n\t\t\t</div>`}function generateComments(t){let e="";return t.forEach(t=>{let n=t.profilePic,a=t.name,i=timeDifference(new Date,new Date(t.createdAt)),s=t.toxic?`<img data-id="${t._id}" data-state="hidden" class="hideMessage" src="./assets/image/hide.webp" alt="Unhide Message" height="30" width="30">`:"",o=t.toxic?"toxic":"",r=t.isReviewed?"./assets/image/reviewed.webp":"./assets/image/kitty.webp",l=t.isReviewed?"reviewed":"reportButton reportComment";e+=`<div class="comment">\n\t\t\t<div class="commentTop">\n\t\t\t\t<div class="commentedUser">\n\t\t\t\t\t<img src="${n}" alt="${a}" class="commentedUserProfilePicture" width="25" height="25">\n\t\t\t\t\t<span class="commentedUserName">${a}</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="commentOptions">\n\t\t\t\t\t<span class="timeCommented">${i}</span>\n\t\t\t\t\t${s}\n\t\t\t\t\t<img data-id="${t._id}" class="${l}" src="${r}" alt="Report Comment" height="25" width="25">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span class="commentText ${o}">${escapeHtml(t.text)}</span>\n\t\t</div>`}),e}function generateMeows(t){let e="";return t.forEach(t=>{let n=timeDifference(new Date,new Date(t.createdAt)),a=t.toxic?`<img data-id="${t._id}" data-state="hidden" class="hideMessage" src="./assets/image/hide.webp" alt="Unhide Message" height="30" width="30">`:"",i=t.toxic?"toxic":"",s=t.likedBy.includes(user._id)?"./assets/image/paw.webp":"./assets/image/unliked.webp",o=t.likedBy.includes(user._id)?"liked":"unliked",r=t.isReviewed?"./assets/image/reviewed.webp":"./assets/image/kitty.webp",l=t.isReviewed?"reviewed":"reportButton";e+=`<div class="meow" data-id="${t._id}">\n            <div class="meowTop">\n                <div class="meowUserStuff">\n                    <img class="meowUserProfilePicture" src="${t.profilePic}" alt="${t.name}" height="30" width="30">\n                    <span class="meowUsername">${t.name}</span>\n                </div>\n                <div class="meowOptionsStuff">\n                    ${a}\n                    <span class="timeMeowed">${n}</span>\n                    <img data-id="${t._id}" class="${l}" src="${r}" alt="Report Message" height="30" width="30">\n                </div>\n            </div>\n            <span class="meowContent ${i}">${escapeHtml(t.text)}</span>\n            <div class="meowBottom">\n                <div class="likeButtonContainer">\n                    <img data-status="${o}" data-id="${t._id}" class="likeButton" src="${s}" alt="Like Button" height="30" width="30">\n                    <span class="likeCount">${t.likes}</span>\n                </div>\n\t\t\t\t<div class="commentButtonContainer">\n\t\t\t\t\t<img data-id="${t._id}" class="commentButton" src="./assets/image/comment.webp" alt="Comment Button" height="30" width="30">\n\t\t\t\t\t<span class="commentCount">${t.comments.length}</span>\n\t\t\t\t</div>\n                <img data-id="${t._id}" class="shareMeowButton" src="./assets/image/share.webp" alt="Share Meow" height="30" width="30">\n            </div>\n        </div>`}),e}function generateMeow(t){let e=timeDifference(new Date,new Date(t.createdAt)),n=t.toxic?`<img data-id="${t._id}" data-state="hidden" class="hideMessage" src="./assets/image/hide.webp" alt="Unhide Message" height="30" width="30">`:"",a=t.toxic?"toxic":"",i=`&nbsp;${t.likes} ${t.likes>1?"likes":"like"}`,s=`<div class="meow" data-id="${t._id}">\n        <div class="meowTop">\n            <div class="meowUserStuff">\n                <img class="meowUserProfilePicture" src="${t.profilePic}" alt="${t.name}" height="30" width="30">\n                <span class="meowUsername">${t.name}</span>\n            </div>\n            <div class="meowOptionsStuff">\n                ${n}\n                <span class="timeMeowed">${e}</span>\n            </div>\n        </div>\n        <span class="meowContent ${a}">${escapeHtml(t.text)}</span>\n        <div class="meowBottom">\n            <div class="likeButtonContainer">\n                <span class="likeCount">${i}</span>\n            </div>\n            <img data-id="${t._id}" class="shareMeowButton" src="./assets/image/share.webp" alt="Share Meow" height="30" width="30">\n        </div>\n    </div>`,o='<div class="promotionHolder">\n                        <span class="promotion">See more on Meow it</span>\n                    </div>';return s+o}function generateInstallationPromotionDiv(){return'<div class="installationPromotionCard">\n\t\t<span class="installPromotionHeading">\n\t\t\tInstall to get the most out of Meow It!\n\t\t</span>\n\t\t<span class="noFearHeading">\n\t\t\tInstalling uses almost no storage and provides a quick way to return to this app including the ability to send meows even offline!\n\t\t</span>\n\t\t<div class="installationPromotionButtonsContainer">\n\t\t\t<span class="notNowButton">Not now</span>\n\t\t\t<span class="installButton">Install</span>\n\t\t</div>\n\t</div>'}function getPWADisplayMode(){const t=window.matchMedia("(display-mode: standalone)").matches;return document.referrer.startsWith("android-app://")?"twa":navigator.standalone||t?"standalone":"browser"}async function shouldWeShowInstallPrompt(){let t=await getLocalForage("disUserSayNOForInstallation");return null==t||null==t||0==t}async function handleLike(t){let e=t.target.dataset.id,n=t.target.dataset.status,a="unliked"==n?1:-1;1==a?(t.target.src="./assets/image/paw.webp",t.target.dataset.status="liked"):(t.target.src="./assets/image/unliked.webp",t.target.dataset.status="unliked"),t.target.parentElement.querySelector(".likeCount").innerText=parseInt(t.target.parentElement.querySelector(".likeCount").innerText)+a,await fetch(serverURLAPIEndpoint+"meow/like",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({userid:user._id,meowid:e,like:a})}).catch(()=>{showStatus("Something went wrong. Please try again later."),setTimeout(()=>{hideStatus()},2e3)})}async function createNewComment({text:t,userId:e,meowId:n}){let a={text:t,userId:e,meowId:n},i=null;try{i=await fetch(serverURLAPIEndpoint+"comment/new",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)})}catch(t){console.log("Something went wrong! 😦"+t)}if(null!=i){let t=await i.json();return t}return null}function handleLocationIconClick(t){let e=t.target.parentElement,n=e.querySelector(".locationText"),a=n.dataset.accuracy;alert(`Accuracy: ${a}m`)}function getLocationString(t){let e=""!=t.locality?", ":"",n=""!=t.city?", ":"";return`${t.locality}${e}${t.city}${n}${t.principalSubdivision}`}async function getSingleMeow(t){try{let e=await fetch(serverURLAPIEndpoint+`meow/${t}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(200!==e.status)throw new Error("Something Happened: 😓");let n=await e.json();return n}catch(t){return console.log("Something Happened: 😓",t),null}}function handleEye(t){let e=null,n=t.target.dataset.state;e=t.target.parentElement.parentElement.parentElement.querySelector(".commentText");try{e.style}catch(n){e=t.target.parentElement.parentElement.parentElement.querySelector(".meowContent")}"hidden"==n?(t.target.src="./assets/image/eye.webp",t.target.dataset.state="visible",e.style.fontFamily="SFPro"):(t.target.src="./assets/image/hide.webp",t.target.dataset.state="hidden",e.style.fontFamily="Galactico")}async function handleReview(t){let e=t.target.dataset.id;t.target.src="./assets/image/reviewed.webp",t.target.classList.remove("reportButton"),t.target.classList.add("reviewed");let n=t.target.classList.contains("reportComment"),a=n?"comment/review":"meow/review",i=n?{userId:user._id,commentId:e}:{userid:user._id,meowid:e};await fetch(serverURLAPIEndpoint+a,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})}async function handleShareButton(t){let e=t.target.dataset.id,n="Check out this Meow on Meow it! 😺",a={title:"Check out this Meow!",text:n,url:`${window.location.origin}/?meow=${e}`};await shareStuff(a)}async function getPlaceInfo(t){try{let e="https://api.bigdatacloud.net/data/reverse-geocode-client",n=await fetch(`${e}?latitude=${t.latitude}&longitude=${t.longitude}&localityLanguage=en`),a=await n.json();return a}catch(t){return console.log("Something Happened: 😓",t),null}}function generateNoMeows(){let t="";return t+='<div class="noMeows">\n\t\t<img src="./assets/image/loading.gif" alt="No Meows Nearby" title="No Meows Nearby" height="200" width="200" >\n        <span class="noMeowsText">No meows nearby 🙁</span>\n        <span class="askUserToCreate">Create a new meow by clicking on the plus icon 😽</span>\n    </div>',t}async function newMeow(t,e,n){try{let a=await fetch(serverURLAPIEndpoint+"meow/new",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userid:n,text:t,latitude:e.latitude,longitude:e.longitude})}),i=await a.json();return i}catch(t){return console.log("Something Happened: 😓",t),{}}}function escapeHtml(t){let e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]})}function timeDifference(t,e){var n=6e4,a=60*n,i=24*a,s=30*i,o=365*i,r=t-e;return r<n?r/1e3<30?"Just now":Math.round(r/1e3)+"s":r<a?Math.round(r/n)+"m":r<i?Math.round(r/a)+"h":r<s?Math.round(r/i)+"d":r<o?Math.round(r/s)+"month":Math.round(r/o)+"y"}function getCurrentPosition(){return new Promise((t,e)=>{navigator.geolocation.getCurrentPosition(e=>t(e),t=>e(t))})}async function shareStuff(t){try{navigator.share&&await navigator.share(t)}catch(t){alert("Couldn't share the content 🙁"),console.log(t)}}function countCharactersInTextField(t){let e=t.target.parentElement,n=e.querySelector(".meowInputCharactersRemainingText").dataset.limit,a=e.querySelector(".meowInputCharactersRemainingNumber"),i="#0070f3",s="#f35d00",o="#ea2027",r=t.target,l=r.value.length,c=n-l;if(c<0)return void(t.target.value=t.target.value.slice(0,n));let d=r.value;window.localStorage.setItem("text",d),a.innerText=c;let m=c/n;a.style.color=m>.75?i:m>.4?s:o}async function deleteCache(){await caches.keys().then(t=>{Promise.all(t.map(t=>{caches.delete(t)}))}),alert("Request sent to clear browser cache! 🙌")}async function getPostsFromIndexedDB(){let t=await localforage.getItem("meows");return t||[]}async function addToBGSyncMeowRegistry({text:t,userid:e,coords:n}){let a=await getLocalForage("meowQueue");null==a&&(a=[]),a.push({text:t,userid:e,coords:n}),await setLocalForage("meowQueue",a)}async function addToBGSyncCommentsRegistry(t){let e=await getLocalForage("commentQueue");null==e&&(e=[]),e.push(t),await setLocalForage("commentQueue",e)}function clearTextData(){localStorage.removeItem("text")}function getSavedTextData(){let t=localStorage.getItem("text");return t}async function getUpdatedPosition(){let t=await getLocalForage("position");return{coords:{latitude:t.latitude,longitude:t.longitude,accuracy:t.accuracy}}}async function getBooleanForLocation(t){if(t)return{isUpdated:!1,locationPermission:t};let e=await getLocalForage("position");if(null!=e){let t=e.time;if(t>Date.now()-108e5)return{isUpdated:!0,locationPermission:!0}}return{isUpdated:!1,locationPermission:t}}let serverURLAPIEndpoint="https://meow-ruby.vercel.app/api/";